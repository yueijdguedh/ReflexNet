syntax = "proto3";
package reflexnet.inferencegateway.v1;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "reflexnet/inferencegateway/v1/inference.proto";

option go_package = "github.com/yueijdguedh/ReflexNet/x/inferencegateway/types";

// Msg defines the inferencegateway Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // SubmitInferenceRequest submits a new inference request.
  rpc SubmitInferenceRequest(MsgSubmitInferenceRequest) returns (MsgSubmitInferenceRequestResponse);
  
  // SubmitInferenceResponse submits an inference response with proof.
  rpc SubmitInferenceResponse(MsgSubmitInferenceResponse) returns (MsgSubmitInferenceResponseResponse);
  
  // VerifyProof verifies a zkML proof for an inference.
  rpc VerifyProof(MsgVerifyProof) returns (MsgVerifyProofResponse);
}

// MsgSubmitInferenceRequest is the message to submit an inference request.
message MsgSubmitInferenceRequest {
  option (cosmos.msg.v1.signer) = "requester";
  
  string requester = 1;
  uint64 model_id = 2;
  string input_data = 3;
  uint64 nonce = 4;
}

// MsgSubmitInferenceRequestResponse is the response for MsgSubmitInferenceRequest.
message MsgSubmitInferenceRequestResponse {
  string request_id = 1;
}

// MsgSubmitInferenceResponse is the message to submit an inference response.
message MsgSubmitInferenceResponse {
  option (cosmos.msg.v1.signer) = "node_address";
  
  string node_address = 1;
  string request_id = 2;
  string output_data = 3;
  bytes proof = 4;
  uint64 compute_units = 5;
}

// MsgSubmitInferenceResponseResponse is the response for MsgSubmitInferenceResponse.
message MsgSubmitInferenceResponseResponse {}

// MsgVerifyProof is the message to verify a zkML proof.
message MsgVerifyProof {
  option (cosmos.msg.v1.signer) = "verifier";
  
  string verifier = 1;
  string request_id = 2;
  ZKProof proof = 3 [(gogoproto.nullable) = false];
}

// MsgVerifyProofResponse is the response for MsgVerifyProof.
message MsgVerifyProofResponse {
  bool valid = 1;
}

